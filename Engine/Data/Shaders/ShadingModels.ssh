#pragma once 
#include "BRDF.ssh"
#include "MaterialData.ssh"
#include "LightsCommon.ssh"

float New_a2(float a2, float aSinAlpha, float vDotH)
{
	return a2 + 0.25f * aSinAlpha * (3.0f * fastSqrtNR0(a2) + aSinAlpha) / ( vDotH + 0.001f );
}

float EnergyNormalization( inout float a2, float vDotH, SR_AreaLight aLight )
{
	if(aLight.mSphereSinAlphaSoft > 0.0f)
	{
		// Modify Roughness
		a2 = saturate(a2 + Pow2(aLight.mSphereSinAlphaSoft) / (vDotH * 3.6f + 0.4f));
	}

	float sphere_a2 = a2;
	float energy = 1.0f;
	if(aLight.mSphereSinAlpha > 0.0f)
	{
		sphere_a2 = New_a2(a2, aLight.mSphereSinAlpha, vDotH);
		energy = a2 / sphere_a2;
	}

	return energy;
}


#if USE_SUBSURFACE_SHADING
float3 CalculateShading(in MaterialData aMaterialData, in SR_AreaLight aAreaLight, in const float3 aLightDirection, in const float aNdotL, in const float aFalloff, in const float3 aViewDirection)
{
}

#elif USE_CLEARCOAT_SHADING
float3 CalculateShading(in MaterialData aMaterialData, in SR_AreaLight aAreaLight, in const float3 aLightDirection, in const float aNdotL, in const float aFalloff, in const float3 aViewDirection)
{
}

#elif USE_HAIR_SHADING
float3 CalculateShading(in MaterialData aMaterialData, in SR_AreaLight aAreaLight, in const float3 aLightDirection, in const float aNdotL, in const float aFalloff, in const float3 aViewDirection)
{
}

#elif USE_EYE_SHADING
float3 CalculateShading(in MaterialData aMaterialData, in SR_AreaLight aAreaLight, in const float3 aLightDirection, in const float aNdotL, in const float aFalloff, in const float3 aViewDirection)
{
}

#elif USE_CLOTH_SHADING
float3 CalculateShading(in MaterialData aMaterialData, in SR_AreaLight aAreaLight, in const float3 aLightDirection, in const float aNdotL, in const float aFalloff, in const float3 aViewDirection)
{
}

#else //USE_DEFAULT_SHADING
float3 CalculateShading(in MaterialData aMaterialData, in SR_AreaLight aAreaLight, in const float3 aLightDirection, in const float aNdotL, in const float aFalloff, in const float3 aViewDirection)
{
    SR_BxDFProperties bxdfProperties;
    bxdfProperties.Init(aMaterialData.mWorldNormal, aViewDirection, aLightDirection);
    bxdfProperties.SphereMaxNoH(aAreaLight.mSphereSinAlpha, true);
    bxdfProperties.mNdotV = saturate(abs(bxdfProperties.mNdotV) + 1e-5f);

    float a2 = Pow4(aMaterialData.mRoughness);
	float energy = EnergyNormalization(a2, bxdfProperties.mVdotH, aAreaLight);

    float D = D_GGX(a2, bxdfProperties.mNdotH) * energy;
    float G = G_SmithJointApprox(a2, bxdfProperties.mNdotV, aNdotL);
    float3 F = F_Schlick(aMaterialData.mSpecularColor, bxdfProperties.mVdotH);

    float3 diffuseBRDF = Diffuse_Lambert(aMaterialData.mDiffuseColor) * (aFalloff * aNdotL);
    float3 specularBRDF = ((D*G)*F) * (aFalloff * aNdotL);

    return (diffuseBRDF + specularBRDF);
}
#endif