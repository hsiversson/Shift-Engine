#pragma once 
 
// Must reflect SGfx_ViewConstants in SGfx_Camera.h
struct ViewConstants
{
	float4x4 mWorldToClip;
	float4x4 mWorldToClip_NoJitter;
	float4x4 mClipToWorld;

	float4x4 mWorldToCamera;
	float4x4 mCameraToWorld;

	float4x4 mCameraToClip;
	float4x4 mClipToCamera;
	
	float4x4 mPrevWorldToClip;
	float4x4 mPrevWorldToClip_NoJitter;
	float4x4 mPrevClipToWorld;

	float4x4 mPrevWorldToCamera;
	float4x4 mPrevCameraToWorld;

	float4x4 mPrevCameraToClip;
	float4x4 mPrevClipToCamera;

	float4 mPixelToClipScaleAndOffset;

	float4 mViewportPosAndInvSize;
	float4 mViewportSizeAndScale;
	float4 mRenderTargetSizeAndInvSize;

	float3 mCameraPosition;
	float mFov;
};

struct ScatteringConstants
{
    float mPlanetRadiusKm; // in Kilometers
    float mPlanetAtmosphereRadiusKm;  // in Kilometers
	uint mTransmittanceLUTDescriptorIndex;
	uint mMultiScatteringLUTDescriptorIndex;

	float3 mRayleighScattering;
	float mRayleighDensityExpScale;

	float3 mMieScattering;
	float _unused0;

	float3 mMieAbsorption;
	float mMiePhaseG;

	float3 mMieExtinction;
	float mMieDensityExpScale;

	float3 mAbsorptionExtinction;
	float mAbsorptionDensity0LayerWidth;

	float mAbsorptionDensity0ConstantTerm;
	float mAbsorptionDensity0LinearTerm;
	float mAbsorptionDensity1ConstantTerm;
	float mAbsorptionDensity1LinearTerm;

	float4 mPlanetCenterAndViewHeight;

	float3 mVirtualSkyCameraPosition;
	float _unused1;
};

// Must reflect SGfx_EnvrionmentConstants in SGfx_Environment.h
struct EnvironmentConstants
{
    float3 mSunLightDirection;
    float mSunLightIntensity;

    float3 mSunLightColor;
    uint _unused0;

	ScatteringConstants mScatteringConstants;

	// Irradiance Constants
	uint mIrradianceBrdfLUTDescriptorIndex;
	uint mDiffuseIrradianceMapDescriptorIndex;
	uint mPreFilteredSpecularIrradianceMapDescriptorIndex;
	uint mNumPreFilteredIrradianceMapMips;
};

// Must reflect SGfx_ShadowConstants in SGfx_ShadowConstants.h
struct ShadowConstants
{
	float4x4 mCSMWorldToClip[4];

    float4 mCSMSplitPoints;

	int4 mCSMDescriptorIndices;

	float2 mCSMResolutionAndInv;
	float2 _unused0;
};

// Must reflect SGfx_LightCullingConstants in SGfx_LightCulling.h

struct LightCullingConstants
{
	uint2 mNumTiles;
	uint mTotalNumLights;
	uint mTileGridDescriptorIndex;

	uint mLightBufferDescriptorIndex;
	uint3 _unused0;
};

struct GIConstants
{
	float3 mGridStartPosition;
	float mMaxDistance;

	float3 mGridStep;
	float mDepthSharpness;

	uint3 mNumProbes;
	float mHistoryFactor;

	float mNormalBias;
	float mEnergyConservation;
	uint mEnableVisibilityTesting;
	uint mRaysPerProbe;

	uint2 mIrradianceTextureDimensions;
	uint mIrradianceProbeSideLength;
	uint mIrradianceTextureDescriptorIndex;

	uint2 mDepthTextureDimensions;
	uint mDepthProbeSideLength;
	uint mDepthTextureDescriptorIndex;

	float mGlobalRoughnessMultiplier;
	uint mForceUpdate;
	uint mDiffuseEnabled;
	uint mSpecularEnabled;
};

struct VisibilityBufferConstants
{
    uint mDepthDescriptorIndex; // D32_FLOAT
    uint mNormalsDescriptorIndex; // RG16_FLOAT
    uint mMaterialsDescriptorIndex; // RGBA16_FLOAT
	uint _unused;
};

struct SceneConstants
{
    ViewConstants mViewConstants;
	VisibilityBufferConstants mVisibilityBufferConstants;
    EnvironmentConstants mEnvironmentConstants;
	ShadowConstants mShadowConstants;
	LightCullingConstants mLightCullingConstants;
	GIConstants mGIConstants;

	uint mInstanceDataBufferIndex;
	uint mMaterialInfoBufferIndex;
	uint mRaytracingSceneDescriptorIndex;
	uint mRaytracingInstanceDataBufferIndex;

	uint mAmbientOcclusionDescriptorIndex;
	uint mFrameIndex;
	float mFrameTimeDelta;
	uint _unused0;
};

ConstantBuffer<SceneConstants> gSceneConstants : register(b1);

#define SR_SceneConstants			gSceneConstants
#define SR_ViewConstants			gSceneConstants.mViewConstants
#define SR_EnvironmentConstants 	gSceneConstants.mEnvironmentConstants
#define SR_ScatteringConstants  	SR_EnvironmentConstants.mScatteringConstants
#define SR_ShadowConstants			gSceneConstants.mShadowConstants
#define SR_LightCullingConstants	gSceneConstants.mLightCullingConstants
#define SR_GIConstants				gSceneConstants.mGIConstants

// Visibility Buffer
//Texture2D<float> SR_GetDepthBuffer()
//{
//    return GetTexture2D<float>(gSceneConstants.mVisibilityBufferConstants.mDepthDescriptorIndex);
//}
//
//Texture2D<float2> SR_GetNormalBuffer()
//{
//    return GetTexture2D<float2>(gSceneConstants.mVisibilityBufferConstants.mNormalsDescriptorIndex);
//}
//
//Texture2D<float4> SR_GetMaterialBuffer()
//{
//    return GetTexture2D<float4>(gSceneConstants.mVisibilityBufferConstants.mMaterialsDescriptorIndex);
//}

// Utilities
float2 SR_PixelToClip(float2 aPixelCoord)
{
	return aPixelCoord * SR_ViewConstants.mPixelToClipScaleAndOffset.xy + SR_ViewConstants.mPixelToClipScaleAndOffset.zw;
}

float3 SR_ClipToCamera(float3 aClipPos)
{
	float4 cameraPos = mul(SR_ViewConstants.mClipToCamera, float4(aClipPos, 1.0f));
	cameraPos /= cameraPos.w;
	return cameraPos.xyz;
}

float3 SR_ClipToWorld(float3 aClipPos)
{	
	float3 cameraPos = SR_ClipToCamera(aClipPos);
	return mul(SR_ViewConstants.mCameraToWorld, float4(cameraPos, 1.0f)).xyz;
}