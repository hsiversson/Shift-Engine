#pragma once 
////////////////////////////////////////
// Sphere
struct SR_Sphere
{
	float3 mCenter;
	float mRadius;
};

////////////////////////////////////////
// Plane
struct SR_Plane
{
	float3 mNormal;
	float mDistance;
};

////////////////////////////////////////
// AABB
struct SR_AABB
{
	float3 mCenter;
	float3 mHalfExtents;

	float3 GetMin() { return mCenter - mHalfExtents; }
	float3 GetMax() { return mCenter + mHalfExtents; }
};

bool IntersectSphereVsAABB(in SR_Sphere aSphere, in SR_AABB aAABB)
{
	float3 delta = max(0, abs(aAABB.mCenter - aSphere.mCenter) - aAABB.mHalfExtents);
	float distSq = dot(delta, delta);
	return distSq <= aSphere.mRadius * aSphere.mRadius;
}
bool IntersectAABB(SR_AABB aAABB0, SR_AABB aAABB1)
{
	if (abs(aAABB0.mCenter[0] - aAABB1.mCenter[0]) > (aAABB0.mHalfExtents[0] + aAABB1.mHalfExtents[0]))
		return false;
	if (abs(aAABB0.mCenter[1] - aAABB1.mCenter[1]) > (aAABB0.mHalfExtents[1] + aAABB1.mHalfExtents[1]))
		return false;
	if (abs(aAABB0.mCenter[2] - aAABB1.mCenter[2]) > (aAABB0.mHalfExtents[2] + aAABB1.mHalfExtents[2]))
		return false;

	return true;
}
void ConstructAABBFromMinMax(inout SR_AABB aAABB, float3 aMin, float3 aMax)
{
	aAABB.mCenter = (aMin + aMax) * 0.5f;
	aAABB.mHalfExtents = abs(aMax - aAABB.mCenter);
}
void TransformAABB(inout SR_AABB aAABB, float4x4 aMatrix)
{
	float3 _min = aAABB.GetMin();
	float3 _max = aAABB.GetMax();
	float3 corners[8];
	corners[0] = _min;
	corners[1] = float3(_min.x, _max.y, _min.z);
	corners[2] = float3(_min.x, _max.y, _max.z);
	corners[3] = float3(_min.x, _min.y, _max.z);
	corners[4] = float3(_max.x, _min.y, _min.z);
	corners[5] = float3(_max.x, _max.y, _min.z);
	corners[6] = _max;
	corners[7] = float3(_max.x, _min.y, _max.z);
	_min = 1000000.0f;
	_max = -1000000.0f;

	[unroll]
	for (uint i = 0; i < 8; ++i)
	{
		corners[i] = mul(aMatrix, float4(corners[i], 1)).xyz;
		_min = min(_min, corners[i]);
		_max = max(_max, corners[i]);
	}

	ConstructAABBFromMinMax(aAABB, _min, _max);
}

////////////////////////////////////////
// Surfel
struct SR_Surfel
{
	float3 mPosition;
	float3 mNormal;
	float mRadius;
};