#pragma once 
 
#include "ShadingModels.ssh"
#include "LightsCommon.ssh"
#include "LightCullingCommon.ssh"
#include "Shadows.ssh"
#include "Raytracing/RTShadows.ssh"

#define DEBUG_CASCADE_COLOR     (0)
#define DEBUG_LIGHT_CULLING     (0)

#define USE_CSM_SHADOWS         (0)
#define USE_RT_SHADOWS          (1)
#define USE_RT_LOCAL_SHADOWS    (1)

float3 CalculateDirectionalLightContribution(in const MaterialData aMaterialData, in const float3 aWorldPosition, in const float3 aViewDirection, in float aPixelDepth)
{
    float3 lightDirection = SR_EnvironmentConstants.mSunLightDirection;
    float3 lightColor = SR_EnvironmentConstants.mSunLightColor;
    float lightRadiance = SR_EnvironmentConstants.mSunLightIntensity;

    float3 lighting = (float3)0.0f;
    float shadowFactor = 1.0f;

#if USE_RT_SHADOWS
    shadowFactor = TraceShadow(aMaterialData, aWorldPosition, lightDirection, 1000.f, 1.0f);
#else //USE_RT_SHADOWS
#if USE_CSM_SHADOWS
#if DEBUG_CASCADE_COLOR
    float3 debugColor = (float3)0.0f;
    shadowFactor = CalculateCascadedShadowFactor(aWorldPosition, aPixelDepth, debugColor);
    lighting = debugColor;
#else //DEBUG_CASCADE_COLOR
    shadowFactor = CalculateCascadedShadowFactor(aWorldPosition, aPixelDepth);
#endif //DEBUG_CASCADE_COLOR
#endif //USE_CSM_SHADOWS
#endif //USE_RT_SHADOWS

    if (shadowFactor <= 0.0f)
        return lighting;

    float nDotL = saturate(dot(aMaterialData.mWorldNormal, lightDirection));
    float3 shading = CalculateShading(aMaterialData, (SR_AreaLight)0, lightDirection, nDotL, 1.0f, aViewDirection);
    lighting += (shading * lightColor * lightRadiance * shadowFactor);

    return lighting;
}

float GetInverseSquareFalloff(float aDistanceSqr, float aRange)
{
	return Square(saturate(1.0f - Square(aDistanceSqr * Square(aRange))));
}

/** 
 * Calculates attenuation for a spot light.
 * L normalize vector to light. 
 * SpotDirection is the direction of the spot light.
 * SpotAngles.x is CosOuterCone, SpotAngles.y is InvCosConeDifference. 
 */
float GetSpotAttenuationMask(float3 L, float3 aSpotDirection, float2 aSpotAngles)
{
	return saturate((dot(L, -aSpotDirection) - aSpotAngles.x) * aSpotAngles.y);
}
float GetSpotAttenuation(float3 L, float3 aSpotDirection, float2 aSpotAngles)
{
	float coneAngleFalloff = Square(GetSpotAttenuationMask(L, aSpotDirection, aSpotAngles));
	return coneAngleFalloff;
}

// Alpha is half of angle of spherical cap
float SphereHorizonCosWrap(float nDotL, float aSinAlphaSqr)
{
	float sinAlpha = sqrt( aSinAlphaSqr );
	if(nDotL < sinAlpha)
	{
		nDotL = max( nDotL, -sinAlpha );
		// Hermite spline approximation
		// Fairly accurate with SinAlpha < 0.8
		// y=0 and dy/dx=0 at -SinAlpha
		// y=SinAlpha and dy/dx=1 at SinAlpha
		nDotL = Pow2(sinAlpha + nDotL) / (4.0f * sinAlpha);
	}
	return nDotL;
}

float GetLocalLightAttenuation(in const SR_LocalLight aLight, in const float3 aWorldPosition, in const float3 L, in const float aDistanceSqr)
{
    float attenuation = GetInverseSquareFalloff(aDistanceSqr, aLight.mInvRange);

    if (aLight.mType == SR_LightType_Spot)
    {
        attenuation *= GetSpotAttenuation(L, aLight.mDirection, aLight.mSpotAngles);
    }

    return attenuation;
}

float3 CalculateLocalLightContribution(in const MaterialData aMaterialData, in const SR_LocalLight aLight, in const float3 aWorldPosition, in const float3 aViewDirection)
{
    float3 toLight = aLight.mPosition - aWorldPosition;
    float distSqr = dot(toLight, toLight);
    float invDist = rsqrt(distSqr);
    float3 L = toLight * invDist;

    float attenuation = GetLocalLightAttenuation(aLight, aWorldPosition, L, distSqr);

    float shadowFactor = 1.0f;
#if USE_RT_LOCAL_SHADOWS
    if (aLight.mCastShadow)
        shadowFactor = TraceShadow(aMaterialData, aWorldPosition, L, length(toLight), aLight.mSourceRadius);
#endif

    float3 lighting = (float3)0;
    [branch]
    if (attenuation > 0.0f && shadowFactor > 0.0f)
    {
        float3 lightColor = aLight.mColoredIntensity;

	    SR_AreaLight areaLight;
        {
		    float falloff = rcp(distSqr /*+ distBiasSqr*/);

		    float nDotL = dot(aMaterialData.mWorldNormal, L);
		    float sinAlphaSqr = saturate(Pow2(aLight.mSourceRadius) * falloff);
		    nDotL = SphereHorizonCosWrap(nDotL, sinAlphaSqr);
	        nDotL = saturate(nDotL);

	        float a = Pow2(aMaterialData.mRoughness);

            areaLight.mSphereSinAlpha = saturate(aLight.mSourceRadius * invDist * (1.0f - a));
            areaLight.mSphereSinAlphaSoft = saturate(aLight.mSourceRadius * invDist);
            areaLight.mNdotL = nDotL;
            areaLight.mFalloff = falloff;
            areaLight.mLightVector = L;
        }

        float3 shading = CalculateShading(aMaterialData, areaLight, areaLight.mLightVector, areaLight.mNdotL, areaLight.mFalloff, aViewDirection);
        lighting = shading * aLight.mColoredIntensity * attenuation * shadowFactor;
    }

    return lighting;
}

#if DEBUG_LIGHT_CULLING
float3 GetTileCostColor(uint aNumLights)
{
    if (aNumLights > 60)
        return float3(1.0f, 0.0f, 1.0f);
    if (aNumLights > 32)
        return float3(1.0f, 0.0f, 0.0f);
    if (aNumLights > 16)
        return float3(1.0f, 1.0f, 0.0f);
    if (aNumLights > 8)
        return float3(0.0f, 1.0f, 0.0f);
    if (aNumLights > 4)
        return float3(0.0f, 0.0f, 1.0f);
    if (aNumLights > 0)
        return float3(0.75f, 0.75f, 0.75f);
    
    return float3(0.25f, 0.25f, 0.25f);
}
#endif

float3 CalculateDirectLighting(in MaterialData aMaterialData, in const float3 aWorldPosition, in const float3 aViewDirection, in float aPixelDepth)
{
    float3 result = (float3)0.0f;

    // Should we only support one directional light?
    result += CalculateDirectionalLightContribution(aMaterialData, aWorldPosition, aViewDirection, aPixelDepth);

    const SR_TileData tileData = GetTileData(aMaterialData.mSvPosition.xy);
    for (uint i = 0; i < tileData.mNumLights; ++i)
    {
        const SR_LocalLight light = GetLocalLight(tileData.mLightIndices[i]);
        result += CalculateLocalLightContribution(aMaterialData, light, aWorldPosition, aViewDirection);
    }

#if DEBUG_LIGHT_CULLING
    result += GetTileCostColor(tileData.mNumLights);
#endif

    return result;
}