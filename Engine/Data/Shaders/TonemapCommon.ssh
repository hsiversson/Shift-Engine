#ifndef TONEMAP_COMMON_HEADER
#define TONEMAP_COMMON_HEADER

#include "Common.ssh"
#include "ACES.ssh"
#include "GammaCommon.ssh"

//
// Dolby PQ transforms
//
float3 ST2084ToLinear(float3 aPQ)
{
	const float m1 = 0.1593017578125; // = 2610. / 4096. * .25;
	const float m2 = 78.84375; // = 2523. / 4096. *  128;
	const float c1 = 0.8359375; // = 2392. / 4096. * 32 - 2413./4096.*32 + 1;
	const float c2 = 18.8515625; // = 2413. / 4096. * 32;
	const float c3 = 18.6875; // = 2392. / 4096. * 32;
	const float C = 10000.;

	float3 Np = pow( aPQ, 1./m2 );
	float3 L = Np - c1;
	L = max(0., L);
	L = L / (c2 - c3 * Np);
	L = pow( L, 1./m1 );
	float3 P = L * C;

	return P;
}

float3 LinearToST2084(float3 aLinear)
{
	const float m1 = 0.1593017578125; // = 2610. / 4096. * .25;
	const float m2 = 78.84375; // = 2523. / 4096. *  128;
	const float c1 = 0.8359375; // = 2392. / 4096. * 32 - 2413./4096.*32 + 1;
	const float c2 = 18.8515625; // = 2413. / 4096. * 32;
	const float c3 = 18.6875; // = 2392. / 4096. * 32;
	const float C = 10000.;

	float3 L = aLinear/C;
	float3 Lm = pow(L, m1);
	float3 N1 = ( c1 + c2 * Lm );
	float3 N2 = ( 1.0 + c3 * Lm );
	float3 N = N1 * rcp(N2);
	float3 P = pow( N, m2 );
	
	return P;
}

float3 ST2084ToScRGB(float3 aColor)
{
	// Nvidia HDR encoding - Remove PQ, convert to linear scRGB
	const float3x3 AP1_2_sRGB = mul(XYZ_2_sRGB_MAT, AP1_2_XYZ_MAT);
	const float whitePoint = 80.f;

	// 1000.f nit display
	float maxODTNits = 1000.0f;
	float minODTNits = 0.0001f;

	//if (OutputDevice == 4 || OutputDevice == 6)
	//{
	//	// 2000 nit display
	//	MaxODTNits = 2000.0f;
	//	MinODTNits = 0.005f;
	//}

	float3 outColor = ST2084ToLinear(aColor);
		
	outColor = clamp(outColor, minODTNits, maxODTNits);
	outColor.x = Y_2_linCV(outColor.x, maxODTNits, minODTNits);
	outColor.y = Y_2_linCV(outColor.y, maxODTNits, minODTNits);
	outColor.z = Y_2_linCV(outColor.z, maxODTNits, minODTNits);

	float scRGBScale = maxODTNits / whitePoint;
	outColor = mul(AP1_2_sRGB, outColor) * scRGBScale;

	return outColor;
}


// TESTING

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
static const float3x3 ACESInputMat =
{
    {0.59719, 0.35458, 0.04823},
    {0.07600, 0.90834, 0.01566},
    {0.02840, 0.13383, 0.83777}
};

// ODT_SAT => XYZ => D60_2_D65 => sRGB
static const float3x3 ACESOutputMat =
{
    { 1.60475, -0.53108, -0.07367},
    {-0.10208,  1.10813, -0.00605},
    {-0.00327, -0.07276,  1.07602}
};

float3 RRTAndODTFit(float3 v)
{
    float3 a = v * (v + 0.0245786f) - 0.000090537f;
    float3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

float3 ACESFitted(float3 color)
{
    color = mul(ACESInputMat, color);

    // Apply RRT and ODT
    color = RRTAndODTFit(color);

    color = mul(ACESOutputMat, color);

    // Clamp to [0, 1]
    color = saturate(color);

    return color;
}


#endif // TONEMAP_COMMON_HEADER