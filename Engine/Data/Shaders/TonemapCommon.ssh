#pragma once 
#include "Common.ssh"
#include "ACES.ssh"
#include "GammaCommon.ssh"

#define TONEMAP_HDR_ACES_FILM_APPROX

#ifdef TONEMAP_HDR_REINHARD
float3 ReinhardTonemapping(float3 aInColor)
{
	return aInColor / (1.0f + aInColor);
}
#endif

#ifdef TONEMAP_HDR_MODIFIED_REINHARD
float3 ModifiedReinhardTonemapping(float3 aInColor)
{
	return (aInColor * (1.0f + (aInColor / LUT.White2))) / (1.0f + aInColor);
}
#endif

#ifdef TONEMAP_HDR_CUSTOM_REINHARD
float3 CustomReinhardTonemapping(float3 aInColor)
{
	float3 result = aInColor * LUT.CustomReinhardScale;
	return result / (result + float3(LUT.CustomReinhardOffset));
}
#endif

#ifdef TONEMAP_HDR_FILMIC
float3 FilmicTonemapping(float3 aInColor)
{
	float3 x = max((float3)0, aInColor - 0.004f);
	float3 gammaColor = (x*(6.2f*x + 0.5f)) / (x*(6.2f*x + 1.7f) + 0.06f);
	return pow(gammaColor, (float3)2.2f);
}
#endif //TONEMAP_FILMIC

#ifdef TONEMAP_HDR_FILMIC_CUSTOMIZABLE
float3 FilmicTonemappingCustomizable(float3 aInColor)
{
	aInColor *= 1.95;

	float A = LUT.ShoulderStrength;
	float B = LUT.LinearStrength;
	float C = LUT.LinearAngle;
	float D = LUT.ToeStrength;
	float E = LUT.ToeNumerator;
	float F = LUT.ToeDenominator;
	return ((aInColor * (A*aInColor + C*B) + D*E)/(aInColor * (A*aInColor + B) + D*F)) - E/F;
}
#endif //TONEMAP_HDR_FILMIC_CUSTOMIZABLE

#ifdef TONEMAP_HDR_LOTTES
float LottesTonemap(float x)
{
	x = min(x, LUT.LottesMax);
	float z = pow(x, LUT.LottesContrast);
	return z / (pow(z, LUT.LottesShoulder) * LUT.LottesB + LUT.LottesC);
}

float3 LottesTonemapping(float3 aInColor)
{
	float peak = max(aInColor.x, max(aInColor.y, aInColor.z));
	float tonemappedMaximum = LottesTonemap(peak);

	float3 ratio = aInColor / peak;

	ratio = pow(ratio, LUT.LottesSaturationDivCrossSaturation);
	ratio = lerp(ratio, (float3)1, pow(tonemappedMaximum, LUT.LottesCrosstalk));
	ratio = pow(ratio, LUT.LottesCrossSaturation);

	return ratio * tonemappedMaximum;
}
#endif //TONEMAP_LOTTES

#ifdef TONEMAP_HDR_ACES
float3 ACESTonemapping(float3 aInColor)
{
	aInColor *= 2;

	float3 aces = MR_Transform(BT709_to_AP0, aInColor);
	float3 oces = RRT(aces);

//#ifdef GFX_ENCODE_PQ
//	return odt_academy_Rec2020(oces, ODT_2000nits) / 10000;
//#endif

	return ODT_Academy_RGBmonitor_100nits_dim(oces);
}
#endif

#ifdef TONEMAP_HDR_ACES_FILM_APPROX
float3 ACESFilmApproximation(float3 aInColor)
{
	float a = 2.51;
	float b = 0.03;
	float c = 2.43;
	float d = 0.59;
	float e = 0.14;
	return saturate((aInColor*(a*aInColor+b))/(aInColor*(c*aInColor+d)+e));
}
#endif //TONEMAP_HDR_ACES_FILM_APPROX

float3 Tonemap(float3 aInColor)
{
    float3 tonemappedColor = (float3)0;

#ifdef TONEMAP_HDR_REINHARD
    tonemappedColor = ReinhardTonemapping(aInColor);
#endif
#ifdef TONEMAP_HDR_MODIFIED_REINHARD
    tonemappedColor = ModifiedReinhardTonemapping(aInColor);
#endif
#ifdef TONEMAP_HDR_CUSTOM_REINHARD
    tonemappedColor = CustomReinhardTonemapping(aInColor);
#endif
#ifdef TONEMAP_HDR_FILMIC
    tonemappedColor = FilmicTonemapping(aInColor);
#endif
#ifdef TONEMAP_HDR_FILMIC_CUSTOMIZABLE
    tonemappedColor = FilmicTonemappingCustomizable(aInColor) / FilmicTonemappingCustomizable(float3(LUT.LinearWhitePoint)).x;
#endif
#ifdef TONEMAP_HDR_LOTTES
    tonemappedColor = LottesTonemapping(aInColor);
#endif
#ifdef TONEMAP_HDR_ACES
    tonemappedColor = ACESTonemapping(aInColor);
#endif
#ifdef TONEMAP_HDR_ACES_FILM_APPROX
    tonemappedColor = ACESFilmApproximation(aInColor);
#endif

    return tonemappedColor;
}