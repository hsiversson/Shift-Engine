

struct MSVert
{
    float4 pos : SV_POSITION;
    float3 color : COLOR0;
};

static float4 cubeVertices[] = 
{
    float4(-0.5f, -0.5f, -0.5f, 1.0f),
    float4(-0.5f, -0.5f, 0.5f, 1.0f),
    float4(-0.5f, 0.5f, -0.5f, 1.0f),
    float4(-0.5f, 0.5f, 0.5f, 1.0f),
    float4(0.5f, -0.5f, -0.5f, 1.0f),
    float4(0.5f, -0.5f, 0.5f, 1.0f),
    float4(0.5f, 0.5f, -0.5f, 1.0f),
    float4(0.5f, 0.5f, 0.5f, 1.0f),
};

static float3 cubeColors[] = 
{
    float3(0.0f, 0.0f, 0.0f),
    float3(0.0f, 0.0f, 1.0f),
    float3(0.0f, 1.0f, 0.0f),
    float3(0.0f, 1.0f, 1.0f),
    float3(1.0f, 0.0f, 1.0f),
    float3(1.0f, 0.0f, 1.0f),
    float3(1.0f, 1.0f, 0.0f),
    float3(1.0f, 1.0f, 1.0f),
};

static uint3 cubeIndices[] = 
{
    uint3(1,2,0),
    uint3(3,2,1),
    uint3(6,5,4),
    uint3(6,7,5),
    uint3(5,1,0),
    uint3(4,5,0),
    uint3(7,6,2),
    uint3(3,7,2),
    uint3(6,4,0),
    uint3(2,6,0),
    uint3(7,3,1),
    uint3(5,7,1),
};

cbuffer ViewProj : register(b0)
{
    float4x4 viewProjection;
}

float4 TransformPosition(float4 v)
{
    return mul(viewProjection, v);
}

[outputtopology("triangle")]
[numthreads(12,1,1)]
void Main(in uint groupThreadId : SV_GroupThreadID, out vertices MSVert outVerts[8], out indices uint3 outIndices[12])
{
    const uint numVertices = 8;
    const uint numPrimitives = 12;

    SetMeshOutputCounts(numVertices, numPrimitives);

    if (groupThreadId < numVertices)
    {
        float4 pos = cubeVertices[groupThreadId];
        outVerts[groupThreadId].pos = TransformPosition(pos);
        outVerts[groupThreadId].color = cubeColors[groupThreadId];
    }

    outIndices[groupThreadId] = cubeIndices[groupThreadId];

}

float4 MainPS(in MSVert input) : SV_TARGET0
{
    return float4(input.color, 1.0f);
}