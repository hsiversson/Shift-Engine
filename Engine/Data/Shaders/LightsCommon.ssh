#ifndef LIGHTS_COMMON_HEADER
#define LIGHTS_COMMON_HEADER

#include "BindlessResources.ssh"
#include "SceneConstants.ssh"

#define SR_LightType_Directional   (0)
#define SR_LightType_Point         (1)
#define SR_LightType_Spot          (2)

struct SR_LocalLight
{
	float3 mDirection;
	float mInvRange;

	float3 mPosition;
	float mRange;

	float3 mColoredIntensity;
	uint mType;

	float2 mSpotAngles;
	float mSourceRadius;
	float mSoftSourceRadius;

	uint mCastShadow;
	uint mShadowMapDescriptorIndex;
	float _unused0[2];
};

struct SR_AreaLight
{
    float mSphereSinAlpha;
    float mSphereSinAlphaSoft;
    float mNdotL;
    float mFalloff;
    float3 mLightVector;
};

struct SR_DirectionalLight
{
    float3 mToLightDirection;
    float _unused0;
    float3 mColoredIntensity;
};

StructuredBuffer<SR_LocalLight> GetLightBuffer()
{
    return GetStructuredBuffer<SR_LocalLight>(SR_LightCullingConstants.mLightBufferDescriptorIndex);
}

SR_LocalLight GetLocalLight(uint aLightIndex)
{
    StructuredBuffer<SR_LocalLight> localLights = GetStructuredBuffer<SR_LocalLight>(SR_LightCullingConstants.mLightBufferDescriptorIndex);
    return localLights[aLightIndex];
}

#endif //LIGHTS_COMMON_HEADER