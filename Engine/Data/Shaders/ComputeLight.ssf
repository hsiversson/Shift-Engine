#include "Common.ssh"
#include "SceneConstants.ssh"
#include "Lighting.ssh"

struct DispatchInfo
{
    float4 mTargetResolutionAndRcp;

    uint mOutputDescriptorIndex;
    uint3 _unused;
};
ConstantBuffer<DispatchInfo> Constants : register(b0);

[numthreads(8, 8, 1)]
void Main(uint3 aDispatchThreadId : SV_DispatchThreadId)
{
    uint2 pixelCoord = aDispatchThreadId.xy;
    const float2 uv = (pixelCoord + 0.5f) * Constants.mTargetResolutionAndRcp.zw;

    float depth = SR_SampleDepth(uv);

    float3 result = (float3)0;
    if (depth > 0.0f)
    {
        float2 clipPos = SR_PixelToClip(float2(pixelCoord + 0.5f));
        float3 worldPosition = SR_ClipToWorld(float3(clipPos, depth));
        float3 viewDirection = normalize(SR_ViewConstants.mCameraPosition - worldPosition);
        float3 worldNormal = SR_SampleGBufferNormal(uv);

        float4 color = SR_SampleGBufferColor(uv);
        float4 materialRMAS = SR_SampleGBufferMaterialRMAS(uv);
        
        MaterialData materialData = BuildMaterialData(float4(pixelCoord, 0.0f, 1.0f), color, worldNormal, materialRMAS, 0.0f);

        result = CalculateLighting(materialData, worldPosition, viewDirection, depth);
    }
    
    RWTexture2D<float4> outputTexture = GetRWTexture2D<float4>(Constants.mOutputDescriptorIndex);
    outputTexture[pixelCoord] = float4(result, 1.0f);
}
