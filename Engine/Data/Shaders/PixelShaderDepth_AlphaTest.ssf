#include "Common.ssh"
#include "MaterialCommon.ssh"

#ifdef OUTPUT_VELOCITY
#include "MotionVector.ssh"
#endif

struct PixelShaderInput
{
	float4 mClipPosition : SV_POSITION;
	float3 mViewPosition : View_POSITION;
	float3 mWorldPosition : WORLD_POSITION;
	float3 mPrevWorldPosition : PREV_WORLD_POSITION;
	float3 mNormal : NORMAL0;
	float3 mTangent : TANGENT;
	float3 mBitangent : BITANGENT;
	float2 mUV : UV0;
	nointerpolation uint mMaterialIndex : MATERIAL_INDEX;
};

#ifdef OUTPUT_VELOCITY
float2 Main(const PixelShaderInput aInput) : SV_TARGET0
#else
void Main(const PixelShaderInput aInput) 
#endif
{
    float3x3 tangentToWorld = float3x3(
        1, 0, 0,
        0, 1, 0,
        0, 0, 1
    );

    // TODO: Make lightweight depth/alpha-test only version...
    MaterialData materialData = BuildMaterialData(aInput.mMaterialIndex, aInput.mUV, aInput.mClipPosition, tangentToWorld);

    float alphaMask = materialData.mAlpha;
    if (alphaMask < 0.5f/*material.mAlphaRef*/)
        discard;

#ifdef OUTPUT_VELOCITY
    return CalculateMotionVector(aInput.mWorldPosition, aInput.mPrevWorldPosition);
#endif
}